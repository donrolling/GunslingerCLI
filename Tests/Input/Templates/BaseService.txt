{{#Imports}}
using {{.}};
{{/Imports}}

namespace {{Namespace}} 
{
	public class {{Name.Value}}BaseService : AsyncService, IEntityService<{{Name.Value}}, {{Key.DataType}}> 
	{
		public {{Name.Value}}BaseService(string connectionString, ILoggerFactory loggerFactory) : base(connectionString, loggerFactory) { }
		
		public virtual async Task<InsertResponse<{{Key.DataType}}>> CreateAsync({{Name.Value}} {{Name.LowerCamelCase}})
		{
			var sql = "Execute [{{Schema}}].[{{Name.Value}}_Insert] {{CSharpInsertCallSignature}}";
			var _params = new DynamicParameters();
			{{#Properties}}
			_params.Add("{{Name.Value}}", {{ModelName.LowerCamelCase}}.{{Name.Value}});
			{{/Properties}}
			var result = await base.ExecuteAsync(sql, _params);
			return InsertResponse<{{Key.DataType}}>.GetInsertResponse(result);
		}
	
		public virtual async Task<TransactionResponse> UpdateAsync({{Name.Value}} {{Name.LowerCamelCase}}) 
		{
			var sql = "Execute [{{Schema}}].[{{Name.Value}}_Update] {{CSharpUpdateCallSignature}}";
			var result = await base.ExecuteAsync(sql, {{Name.LowerCamelCase}});
			return result;
		}

		public virtual async Task<TransactionResponse> DeleteAsync({{Key.DataType}} {{Key.Name.LowerCamelCase}})
		{
			var sql = "Execute [{{Schema}}].[{{Name.Value}}_Delete] where {{Key.Name.Value}} = @{{Key.Name.LowerCamelCase}}";
			var result = await base.ExecuteAsync(sql, new { @{{Key.Name.LowerCamelCase}} = {{Key.Name.LowerCamelCase}} });
			return result;
		}

		public virtual async Task<{{Name.Value}}> SelectByIdAsync({{Key.DataType}} {{Key.Name.LowerCamelCase}})
		{
			var sql = "select * from [{{Schema}}].[{{Name.Value}}] where {{Key.Name.Value}} = @{{Key.Name.LowerCamelCase}}";
			return await this.QuerySingleAsync<{{Name.Value}}>(sql, {{Key.Name.LowerCamelCase}});
		}

		public virtual async Task<IDataResult<{{Name.Value}}>> ReadAllAsync(PageInfo pageInfo) 
		{
			var sql = "select * from [{{Schema}}].[{{Name.Value}}]";
			return await this.QueryDynamicAsync<{{Name.Value}}>(sql, new DynamicParameters(), pageInfo);
		}
	}
}